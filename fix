1.
POST 新增貼文、PATCH 更新貼文，建議對 content 加上 .trim() 避免使用者傳送空白內容
PATCH 若帶無關的資料也會顯示成功，雖然不會動到資料庫的資料，但可以調整一下
PATCH 目前回傳的是舊資料，可以在 options 設定 { new: true } 回傳修改後的資料
PATCH、DELETE 單一貼文，id 如果不存在建議回傳錯誤
DELETE 單一貼文，亂輸入 id（例如：123）時會 crash 需修正
貼文資料的 __v 屬性可移除（參考 移除欄位 __v 方法 章節，或參考官方文件），盡量回給前端的資料是預期會使用到的資料

2.第三堂
; 貼文資料的 __v 屬性可移除（參考 移除欄位 __v 方法 章節，或參考官方文件），回傳給前端的資料盡量是預期會使用到的資料
; POST 新增貼文若有必填欄位未寫，會 app crashed，需補上 try catch 哩
; POST 新增、PUT 更新貼文，建議對 content 加上 .trim()，避免使用者傳送空白內容
; PUT 更新資料時如果必填欄位為空值會被修改成功，建議在 findByIdAndUpdate 加入第三個參數 { runValidators: true }，讓 findByIdAndUpdate 也可以跑 Schema 驗證規則
; 承上，findByIdAndUpdate 第三個參數可再加上 new: true，回傳更新後的資料
; DELETE 刪除單筆資料，若未填寫 ID 路由為 /posts/ 時，會刪除所有貼文，為了避免前端錯誤操作導致刪除所有資料，可利用 req.originalUrl 判斷路由是否為 /posts/ 進行處理。或是請求關係到多筆資料時才加上 s，例如：刪除全部資料為 /posts、刪除單筆資料為 /post/:id
; console.log 測試完畢後可以移除
